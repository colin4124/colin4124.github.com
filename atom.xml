<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[咧威的 Octopress Blog]]></title>
  <link href="http://colin4124.github.com/atom.xml" rel="self"/>
  <link href="http://colin4124.github.com/"/>
  <updated>2013-03-26T14:12:02+00:00</updated>
  <id>http://colin4124.github.com/</id>
  <author>
    <name><![CDATA[咧威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[重写、重构的摘要和感想]]></title>
    <link href="http://colin4124.github.com/blog/2013/03/25/zhong-xie-%2C-zhong-gou-de-zhai-yao-he-gan-xiang/"/>
    <updated>2013-03-25T16:29:00+00:00</updated>
    <id>http://colin4124.github.com/blog/2013/03/25/zhong-xie-,-zhong-gou-de-zhai-yao-he-gan-xiang</id>
    <content type="html"><![CDATA[<style>a{text-decoration:none}a:hover{text-decoration:underline}</style>

<style>a{text-decoration:none}a:hover{text-decoration:underline}</style>

<h1 id="section">缘起</h1>

<p>最近在忙<a href="http://wecaseproject.tk/" title="微盒">微盒主页</a>,之前的主页开发是由<a href="http://weibo.com/319880777">@雨宮汐</a>维护的。由于网页代码是别人写，不了解，在网页加入一些东西时显得困难。所以冒出了<q>要不自己<strong>重写</strong>一个吧</q>的念头。</p>

<p>碰巧，在<a href="http://weibo.com/blogread">@IT技术博客大学习</a>看到<a href="http://blogread.cn/it/article/1107?f=wb">关于重构和重写</a>的文章，接下来又看了<a href="http://blog.csdn.net/whatcanhumdo/article/details/5311697">你永远不应该做的事</a>（这篇文章用 Netscape当例子）、<a href="http://blogread.cn/it/article/5331?f=sa">什么是重构，什么不是重构</a>、<a href="http://blogread.cn/it/article/556?f=sa">网站重构到底是什么，网站重构到底要多久</a>、<a href="http://blogread.cn/it/article/5996?f=sa">如何避免重构带来的危险</a>一系列的文章。强烈建议去看完整的文章。下面将是一些摘要及感想：</p>

<!--more-->
<p>#什么是重构，什么不是重构</p>

<p>重构(Refactoring)这个词最初由Martin Fowler 和 Kent Beck给下的定义，它是:</p>

<blockquote>
  <p><strong>一种修改，使软件的内部结构更容易理解，在不改变软件的可见行为方式前提下使软件更容易变更…它是一种有节制的     整理代码、使bug产生几率最小化的方法。</strong></p>
</blockquote>

<p>重构的结果是引用了快捷方法、去除了重复代码和死代码，使设计和逻辑更加清晰。<strong>重构很简单。</strong>尽可能在写代码前先写测试能够防止你犯错误。小规模的、独立的、稳妥的对代码进行结构上的调整，每次调整完后都要进行测试，确保你没有改变代码的行为特征——<strong>功能和以前一样，只是代码上看着不同。</strong></p>

<p>在这个过程中发现了bug、修改bug，这不是重构。优化不是重构。强化异常捕捉、增加预防性代码不是重构。让代码更容易测试不是重构——<strong>尽管重构能达到相同的效果。这些所有的事都是有益的。但这些都不是重构。</strong></p>

<p><strong>你不是为了重构而重构，你重构是因为你想做其它的事情，而重构能帮助你完成这些事情。不要对那些你不打算进行变更或不会变更的代码进行重构。</strong></p>

<h2 id="scratch-refactoring">为理解而做简略重构(Scratch Refactoring)</h2>

<p>Michael Feather的《Working Effectively with Legacy Code》这本书里提到了简略重构(Scratch Refactoring)的概念；Martin Fowler称之为<strong>“为理解而重构”</strong>。这是用来对付那些你不理解的(或不能忍受的)代码，清理它们，这样在你打算真正动手修改它前，你能对它们是干什么的有了更好的理解，同样也对你debug这些代码有帮助。<strong>一旦你能清楚了一个变量或方法的真正意图，重命名它们，给它们一个更合适的名称，删除那些你不喜欢看的(或觉得没有用的)代码，拆解复杂的条件语句，把长程序分解成数个容易理解的小程序。</strong></p>

<p>重构可以、也应该融入到你写代码或维护代码的过程中——作为日常开发/质量管理的组成部分，就像写测试和代码审查一样。<strong>重构应该被安静的，持续的和低调的完成。</strong>它需要我们把工作精力分出一部分给它，它需要在我们的工期评估和风险评估中考虑到它的存在。<strong>如果做的正确，你不需要去解释或向外人验证这部分工作。</strong></p>

<p>花几分钟、一两个小时做重构，就像是你开发过程中的一种修改，是工作的一部分。<strong>如果它让你花了数天时间，或者更长，那不是重构；那是重写，或重新设计。</strong>如果你需要明确的留出一部分时间(或整个sprint周期)来重构代码，如果需要为清理代码而申请批准，或把清理代码作为一个开发需求，那你不是在重构——即使你用了重构的技术和工具，你仍然做的是另外一种工作。</p>

<p>有些程序员认为对代码进行根本的、重大的修改是他们的权利和义务，在重构的名义下进行重新设计、重写，为了将来，也不辜负自己的技艺。重新设计和重写有时候是你正确的该做的事情。<strong>但出于坦诚和表述清楚，请不要把这些活动赋以重构的名义。</strong>
&gt;##感想：
»我以前都认为重构就是重头再来一遍，看来我误会了，幸好在我对微盒主页进行重写之前看到这些文章，不然就是浪费时间做无用功，而且还有可能阻碍到别人。好吧，我已经弄坏了，让原来的按钮都失效了。</p>

<h1 id="section-1">关于重构和重写</h1>

<h2 id="section-2">程序员以及经理提到重写是基于以下几个理由:</h2>

<ol>
  <li>对完全理解原有代码的恐惧</li>
  <li>作为拖延项目完成时间的借口</li>
  <li>希望表现自己的能力,觉得自己重新写比修复别人的工作更有挑战性与创造性</li>
  <li>不了解重构</li>
</ol>

<h2 id="section-3">而上级能够采纳重写意见一般是基于:</h2>

<ol>
  <li>原有项目时间拖延太长,修改难度越来越高,修复时间似乎是非线性增长的.</li>
  <li>所有程序员都建议重新再来,没人愿意进行修复原有代码的工作</li>
</ol>

<h2 id="section-4">问题在于:</h2>

<ul>
  <li>当你不能够理解以及改善破败代码的时候,你凭什么能够认为能够写出一个功能一致并且更清晰的软件呢?</li>
  <li>首先你认为原来的代码已经是破败不堪,散发着腐败的臭味。</li>
  <li>你不能够靠读它去理解它,因为写的太烂了。但是你如果不读它.你又如何能理解它干了什么呢?</li>
  <li>凭借着从头开始进行复制文档，你又可能忽略多少隐藏在这破败代码沟壑中的细节呢?</li>
  <li>这些细节必然会重复出现,直到你重新遇见问题.找到它,修补它。</li>
  <li>当你没有能力修整破败代码的话，你修补这些细节之后的代码也会是破败的。</li>
  <li><strong>当你无法理解别人破败代码，最终你也无法理解你自己写出来的破败代码。</strong></li>
  <li>重构不是什么高深的技艺.但它需要磨练，但是我遇到很多人.都不会去修炼这项技能.</li>
  <li>迫于项目压力或者惰性，以及古老工匠守则的规劝:<strong>”当一个事物运行正常的时候,不要碰它”。</strong></li>
  <li>和测试一样,至今程序员都没有把测试行为和代码结合在一起来做。</li>
  <li>手工作坊式的做法至今仍在，当然作坊式的手法有其优点。</li>
  <li>不过既然你已经是靠手艺吃饭，那么重构的手艺以及测试的手艺才是我们需要加强的，<strong>而不是继续锻炼靠运气编程的手艺。</strong></li>
</ul>

<blockquote>
  <h2 id="section-5">感想：</h2>
  <blockquote>
    <p>我会试着弄懂<a href="http://weibo.com/319880777">@雨宮汐</a>写的<a href="http://wecaseproject.tk/" title="微盒">微盒主页</a>
的代码，然后改善一下，比如变量名，拆分冗长的结构还有添加一些注释，方便添加和删除一些元素和功能。</p>
  </blockquote>
</blockquote>

<h1 id="section-6">你永远不应该做的事——重写:</h1>

<p>有一个微妙的原因使得程序员总是想抛弃原有的代码重新开始。原因是他们认为原来的代码太混乱。而且有一个很有趣的现象：他们可能错了 。他们认为旧代码混乱的原因是由于编程上的一个基本的，主要的定律：</p>

<blockquote>
  <p><strong>阅读代码比写代码要困难</strong></p>
</blockquote>

<p><strong>新代码要比旧代码好的观点是荒谬的。</strong>旧代码已经在使用了。已经被测试过了。大量的Bug已经被发现了，而且被修复了。这样并没有什么不好的。把程序放在硬盘中并不能使你发现BUG。难道软件像老Dogde Dart车一样，有生锈菌会在车库里等着？难道软件像玩具熊那样如果不用新材料就不会有那么多毛？</p>

<p>一个很重要的事情你要记住，<strong>当你重写代码并没有绝对的理由相信你会比旧代码更好。</strong>首先，你甚至没有和写第一个版本一样的开发团队，因此你并不是”更有经验”。我会再一次犯大多数以前犯过的错误，而且会比原始的版本增加更多的新问题。</p>

<blockquote>
  <h2 id="section-7">感想：</h2>
  <blockquote>
    <p>应该去看原文的Netscape例子。觉得重写代码会把之前的别人的经验教训都扔掉了，而且还是重复劳动比较多。况且我现在还没有能力做出比别人更好的轮子。</p>
  </blockquote>
</blockquote>

<h1 id="section-8">如何避免重构带来的危险</h1>

<p>重构代码很危险，它会给测试工作增加巨大的负担。除非你的程序需要重构，一定不要轻易重构代码。我这里所说的并不是把一个for循环改成while循环，或把一个StringBuffer改成StringBuilder，我说的是大动作，例如重写一个方法，一个函数，甚至整个类或包。如果你缺乏对一个方法或一个类的了解，那你重构它的条件就不充分。即使你有一个天才的计划，你也需要和团队一起设计其中重大的修改。</p>

<h2 id="section-9">当属于下列情况时，你不该重构：</h2>

<ul>
  <li>
    <p>对于你来说，它的逻辑看起来过于复杂，你没有花时间去分析它。</p>
  </li>
  <li>
    <p>你不理解为什么前任程序员要这样编写。</p>
  </li>
  <li>
    <p>你着手的是一个很重要的系统，而且时间很紧。</p>
  </li>
  <li>
    <p>你是团队里的新成员，或新接触这个项目，或这种语言。</p>
  </li>
  <li>
    <p>当属于下列情况时，你可以重构</p>
  </li>
  <li>
    <p>现有的代码对它要实现的功能显得过于复杂，并且你分析过它。</p>
  </li>
  <li>
    <p>修改后的代码远比现存的代码逻辑要清晰。</p>
  </li>
  <li>
    <p>你有足够的时间，人手，财力来支持对项目进行回归测试。</p>
  </li>
  <li>
    <p>现有的代码陈旧无效率。  </p>
  </li>
  <li>
    <p>无人认领的，写的很烂的代码都属于此类。</p>
  </li>
  <li>
    <p>跟你的一位同事谈论对这部分程序进行重构的好处和存在的风险，你们两个都赞成重构。</p>
  </li>
</ul>

<h2 id="section-10">如何降低重构的风险：</h2>

<ul>
  <li>
    <p>权衡一下对一段代码进行重构的利与弊，找出降低风险的方法。调试一段你经过重构但却使产品崩溃的代码，这对你来说将会是在这个行业中最有压力的事情。</p>
  </li>
  <li>
    <p>使用自动化的回归测试，快速的验证你的修改。这非常重要，如果没有准备自动化测试，你应该在做任何修改前建好它。</p>
  </li>
  <li>
    <p>尽量让你的重构处于很短的开发周期，产品更新发布周期也尽可能短。</p>
  </li>
  <li>
    <p>把你重构的代码和其它程序隔离开，这样能让你更容易找到出问题的地方。</p>
  </li>
  <li>
    <p>为你的重构活动准备测试计划，包括回归测试，功能测试，反向测试，负载测试，性能测试和用户确认测试。</p>
  </li>
  <li>
    <p>投入全部精力来研究其中的逻辑，不要分心做其它事情。</p>
  </li>
  <li>
    <p>在需要的地方使用设计模式。不要为了设计模式而增加设计模式。设计模式应该用在合适的时间和合适地方。</p>
  </li>
  <li>
    <p>小粒度重构</p>
  </li>
</ul>

<p>当你在开封一个方法时，如果你发现其中有一部分可以改进，那你就该考虑它，改进它。整洁的代码是我们需要的，因为写的很烂的代码我们到处可见。和你的同事讨论它们，当有人要修改你的代码时不要固守己见。重构，然后回归测试，然后才提交代码。没有人希望自己提交的代码会弄垮系统。</p>

<h2 id="section-11">下面是一些比较有深度的阅读材料。</h2>

<ul>
  <li><a href="http://book.douban.com/subject/1229923/" title="豆瓣读书">重构:改善既有代码的设计</a></li>
  <li><a href="http://book.douban.com/subject/4199741/">代码整洁之道</a></li>
  <li><a href="http://book.douban.com/subject/2248759/">修改代码的艺术</a></li>
  <li><a href="http://book.douban.com/subject/11614538/">程序员的职业素养</a></li>
  <li><a href="http://book.douban.com/subject/3210669/">编程匠艺</a></li>
</ul>

<p><strong>忍住你的欲望，不要试图重构你不理解的代码。多问问题，努力能清楚他们为什么要把程序写成这样。也许他们有很好的理由。</strong>如果你找到一段很古老的代码，很有可能它们是按照古老的方式写的。每天都在新增的API，模式，需求和新领会都会让这些老的方式显得陈旧。<strong>不断努力学习新的技术，但不要为了要使用这些技术而过于热心的在重构中使用它们。</strong>(PS：<strong><q>当你拿起锤子，就觉得哪里都是钉子</q></strong>这句话就是表达了对新学技术的滥用，谨记）</p>

<blockquote>
  <h2 id="section-12">感想：</h2>
  <blockquote>
    <p><strong><q>忍住你的欲望，不要试图重构你不理解的代码。</q></strong>好吧，之前我就在我不理解的情况下，把原来的一些功能改得全部失效了。尽管后来恢复了效果，但是不敢再贸然下手，还是先理解了再说，多交流。</p>
  </blockquote>
</blockquote>

<h1 id="section-13">后记</h1>

<p>我是初学者，半吊子不靠谱。一开始十分感谢<a href="http://wecaseproject.tk/" title="微盒">微盒主页</a>这个项目，让我有练手的机会，还请各位多多包涵。刚开始加入这个项目的时候，我打算自己增加一些元素（我审美观有点二啊，(￣ε(#￣)）。由于不理解，贸然下手，花了好长的时间才加入一个动态LOGO。然后就像文中所说的，想重新写一遍（好吧，我果然是初学者，又范二了(￣ε(#￣)　）。然后就看到这几篇文章，深有感触。</p>

<h3 id="section-14">牢记理念，继续实践</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的octopress博客]]></title>
    <link href="http://colin4124.github.com/blog/2013/03/22/why-i-use-octopress/"/>
    <updated>2013-03-22T22:31:00+00:00</updated>
    <id>http://colin4124.github.com/blog/2013/03/22/why-i-use-octopress</id>
    <content type="html"><![CDATA[<h1 id="section"><strong>缘起</strong></h1>

<p>很早以前就打算开博客，在<a href="http://www.chinaunix.net/&quot;ChinaUnix&quot;">ChinaUnix</a>和<a href="http://www.51cto.com&quot;51cto&quot;">51CTO</a>都开设过博客。不过都是转载的为主，用的都是网站提供的博客，由于定制性很差，所以当时只是关注博客内容。但是没有坚持写下去</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

<script type="math/tex; mode=display">e^x = \sum_{n=0}^\infty \frac{x^n}{n!} = \lim_{n\rightarrow\infty} (1+x/n)^n</script>

<h1 id="section-1">待续。。</h1>
]]></content>
  </entry>
  
</feed>
