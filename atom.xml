<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[咧威的 Octopress Blog]]></title>
  <link href="http://colin4124.github.com/atom.xml" rel="self"/>
  <link href="http://colin4124.github.com/"/>
  <updated>2013-03-25T16:35:52+00:00</updated>
  <id>http://colin4124.github.com/</id>
  <author>
    <name><![CDATA[咧威]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[重写、重构的摘要和感想]]></title>
    <link href="http://colin4124.github.com/blog/2013/03/25/zhong-xie-%2C-zhong-gou-de-zhai-yao-he-gan-xiang/"/>
    <updated>2013-03-25T16:29:00+00:00</updated>
    <id>http://colin4124.github.com/blog/2013/03/25/zhong-xie-,-zhong-gou-de-zhai-yao-he-gan-xiang</id>
    <content type="html"><![CDATA[<style>a{text-decoration:none}a:hover{text-decoration:underline}</style>

<h1 id="section">缘起</h1>

<p>最近在忙<a href="http://wecaseproject.tk/&quot;微盒&quot;">微盒主页</a>,之前的主页开发是由<a href="http://weibo.com/319880777">@雨宮汐</a>维护的。由于网页代码是别人写，不了解，在网页加入一些东西时显得困难。所以冒出了<q>要不自己<strong>重写</strong>一个吧</q>的念头。</p>

<p>碰巧，在<a href="http://weibo.com/blogread">@IT技术博客大学习</a>看到<a href="http://blogread.cn/it/article/1107?f=wb">关于重构和重写</a>的文章，接下来又看了<a href="http://blog.csdn.net/whatcanhumdo/article/details/5311697">你永远不应该做的事</a>、<a href="http://blogread.cn/it/article/556?f=sa">网站重构到底是什么，网站重构到底要多久</a>、<a href="http://blogread.cn/it/article/3605?f=sa">抵制代码重写</a>、<a href="http://blogread.cn/it/article/5996?f=sa">如何避免重构带来的危险</a>一系列的文章。强烈建议去看完整的文章。下面将是一些摘要及感想：</p>

<h2 id="section-1">什么是重构，什么不是重构</h2>

<p>重构(Refactoring)这个词最初由Martin Fowler 和 Kent Beck给下的定义，它是:</p>

<blockquote>
  <p><strong>一种修改，使软件的内部结构更容易理解，在不改变软件的可见行为方式前提下使软件更容易变更…它是一种有节制的整理代码、使bug产生几率最小化的方法。</strong></p>
</blockquote>

<p>重构的结果是引用了快捷方法、去除了重复代码和死代码，使设计和逻辑更加清晰。<strong>重构很简单。</strong>尽可能在写代码前先写测试能够防止你犯错误。小规模的、独立的、稳妥的对代码进行结构上的调整，每次调整完后都要进行测试，确保你没有改变代码的行为特征——<strong>功能和以前一样，只是代码上看着不同。</strong></p>

<p>在这个过程中发现了bug、修改bug，这不是重构。优化不是重构。强化异常捕捉、增加预防性代码不是重构。让代码更容易测试不是重构——<strong>尽管重构能达到相同的效果。这些所有的事都是有益的。但这些都不是重构。</strong></p>

<p><strong>你不是为了重构而重构，你重构是因为你想做其它的事情，而重构能帮助你完成这些事情。不要对那些你不打算进行变更或不会变更的代码进行重构。</strong></p>

<h3 id="scratch-refactoring">为理解而做简略重构(Scratch Refactoring)</h3>

<p>Michael Feather的《Working Effectively with Legacy Code》这本书里提到了简略重构(Scratch Refactoring)的概念；Martin Fowler称之为<strong>“为理解而重构”</strong>。这是用来对付那些你不理解的(或不能忍受的)代码，清理它们，这样在你打算真正动手修改它前，你能对它们是干什么的有了更好的理解，同样也对你debug这些代码有帮助。<strong>一旦你能清楚了一个变量或方法的真正意图，重命名它们，给它们一个更合适的名称，删除那些你不喜欢看的(或觉得没有用的)代码，拆解复杂的条件语句，把长程序分解成数个容易理解的小程序。</strong></p>

<p>重构可以、也应该融入到你写代码或维护代码的过程中——作为日常开发/质量管理的组成部分，就像写测试和代码审查一样。<strong>重构应该被安静的，持续的和低调的完成。</strong>它需要我们把工作精力分出一部分给它，它需要在我们的工期评估和风险评估中考虑到它的存在。<strong>如果做的正确，你不需要去解释或向外人验证这部分工作。</strong></p>

<p>花几分钟、一两个小时做重构，就像是你开发过程中的一种修改，是工作的一部分。<strong>如果它让你花了数天时间，或者更长，那不是重构；那是重写，或重新设计。</strong>如果你需要明确的留出一部分时间(或整个sprint周期)来重构代码，如果需要为清理代码而申请批准，或把清理代码作为一个开发需求，那你不是在重构——即使你用了重构的技术和工具，你仍然做的是另外一种工作。</p>

<p>有些程序员认为对代码进行根本的、重大的修改是他们的权利和义务，在重构的名义下进行重新设计、重写，为了将来，也不辜负自己的技艺。重新设计和重写有时候是你正确的该做的事情。<strong>但出于坦诚和表述清楚，请不要把这些活动赋以重构的名义。</strong></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的octopress博客]]></title>
    <link href="http://colin4124.github.com/blog/2013/03/22/why-i-use-octopress/"/>
    <updated>2013-03-22T22:31:00+00:00</updated>
    <id>http://colin4124.github.com/blog/2013/03/22/why-i-use-octopress</id>
    <content type="html"><![CDATA[<h1 id="section"><strong>缘起</strong></h1>

<p>很早以前就打算开博客，在<a href="http://www.chinaunix.net/&quot;ChinaUnix&quot;">ChinaUnix</a>和<a href="http://www.51cto.com&quot;51cto&quot;">51CTO</a>都开设过博客。不过都是转载的为主，用的都是网站提供的博客，由于定制性很差，所以当时只是关注博客内容。但是没有坚持写下去</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

<script type="math/tex; mode=display">e^x = \sum_{n=0}^\infty \frac{x^n}{n!} = \lim_{n\rightarrow\infty} (1+x/n)^n</script>

<h1 id="section-1">待续。。</h1>
]]></content>
  </entry>
  
</feed>
